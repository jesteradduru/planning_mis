{"version":3,"sources":["assets/P-MIS_LOGO.png","components/VerticalMenuBar/VerticalMenuBar.js","components/Table/HtmlTable.js","components/ParseExcel/ParseExcel.js","containers/App.js","reportWebVitals.js","index.js"],"names":["VerticalMenuBar","props","Nav","vertical","navbar","className","style","height","NavItem","NavbarBrand","to","href","icon","faHome","size","faFileExcel","NavLink","HtmlTable","htmldata","parse","ParseExcel","onSelectFile","f","setState","gridContainer","isLoading","reader","FileReader","onload","evt","bstr","target","result","wb","XLSX","type","wsname","SheetNames","ws","Sheets","data","sheet_to_html","htmlData","readAsBinaryString","alert","state","this","name","id","Button","color","onClick","file","document","getElementById","files","overflow","Spinner","React","Component","App","Container","fluid","Row","Col","md","exact","path","position","top","left","transform","src","Logo","width","alt","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render"],"mappings":"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","file":"static/js/main.fec390e1.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/P-MIS_LOGO.de34237f.png\";","import React from 'react';\r\nimport { Nav, NavItem, NavLink, NavbarBrand } from 'reactstrap';\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome'\r\nimport { faFileExcel, faHome } from '@fortawesome/free-solid-svg-icons'\r\nimport {\r\n    BrowserRouter as Router,\r\n    Switch,\r\n    Route,\r\n    Link\r\n  } from \"react-router-dom\";\r\nconst VerticalMenuBar = (props) => {\r\n  return (\r\n      <Nav vertical navbar className=\"bg-dark px-3\" style={{height:\"100vh\"}} > \r\n        <NavItem>\r\n            <NavbarBrand> \r\n                <Link to=\"/\" href=\"#\" className=\"text-warning nav-link\">\r\n                  <FontAwesomeIcon icon={faHome} size=\"lg\" />\r\n                  <span className=\"ml-2\">Dashboard</span>\r\n                </Link>\r\n            </NavbarBrand>\r\n        </NavItem>\r\n        <NavItem>\r\n          <Link href=\"#\" to=\"/parseExcel\" className=\"text-light nav-link\">\r\n            <FontAwesomeIcon icon={faFileExcel} size=\"1x\" />\r\n            <span className=\"ml-2\">Parse Excel Data</span>\r\n          </Link>\r\n        </NavItem>\r\n        <NavItem>\r\n          <NavLink href=\"#\" className=\"text-light\">Link</NavLink>\r\n        </NavItem>\r\n        <NavItem>\r\n          <NavLink href=\"#\" className=\"text-light\">Link</NavLink>\r\n        </NavItem>\r\n      </Nav>\r\n  );\r\n}\r\n\r\nexport default VerticalMenuBar;","import React from \"react\";\r\nimport parse from 'html-react-parser';\r\nimport \"./style.css\";\r\nconst HtmlTable = ({htmldata}) => {\r\n    return (\r\n        <>\r\n            {htmldata ? parse(htmldata) : null}\r\n        </>\r\n    )\r\n}\r\nexport default HtmlTable;","import React from \"react\";\r\nimport { Button, Spinner, Table } from \"reactstrap\";\r\nimport * as XLSX from 'xlsx';\r\nimport CanvasDatagrid from \"canvas-datagrid\";\r\nimport { Alert, Tab } from \"bootstrap\";\r\nimport HtmlTable from \"../Table/HtmlTable\"\r\n\r\nclass ParseExcel extends React.Component{\r\n    constructor(props){\r\n        super(props);\r\n        this.state = {\r\n            gridContainer: {\r\n                isLoading: false,\r\n                htmlData: \"\"\r\n            }\r\n        }\r\n    }\r\n    onSelectFile = (f) => {\r\n        if(typeof f === \"object\"){\r\n            this.setState({gridContainer: {isLoading: true} });\r\n            const reader = new FileReader();\r\n            reader.onload = (evt) => { // evt = on_file_select event\r\n                /* Parse data */\r\n                const bstr = evt.target.result;\r\n                const wb = XLSX.read(bstr, {type:'binary'});\r\n                /* Get first worksheet */\r\n                const wsname = wb.SheetNames[0];\r\n                const ws = wb.Sheets[wsname];\r\n                /* Convert array of arrays */\r\n                const data = XLSX.utils.sheet_to_html(ws);\r\n                /* Update state */\r\n                this.setState({gridContainer: {htmlData: data, isLoading: false} });\r\n            };\r\n            reader.readAsBinaryString(f);\r\n        }else{\r\n            alert(\"select file!\")\r\n        }\r\n       \r\n      }\r\n\r\n    render() {\r\n        const {isLoading, htmlData} = this.state.gridContainer;\r\n        return (\r\n            \r\n            <>\r\n                <h1>Parse Excel Data</h1>\r\n                <input type=\"file\" name=\"\" id=\"form\"/>\r\n                <hr className=\"bg-warning\"/>\r\n                <div>\r\n                    <Button color=\"success\" onClick={() => {\r\n                        const file = document.getElementById(\"form\");\r\n                        this.onSelectFile(file.files[0])\r\n                    }}>Read</Button>\r\n                </div>\r\n                <br/>   \r\n                <div id=\"grid-container\" style={{height: \"70vh\", overflow: \"scroll\"}}>\r\n                    {isLoading \r\n                    ? \r\n                    <div className=\"text-center\">\r\n                        <h6>Loading</h6>\r\n                        <Spinner color=\"primary\" />\r\n                    </div>\r\n                    : \r\n                    <HtmlTable htmldata={htmlData} /> }\r\n                </div>\r\n            </>\r\n        )\r\n    }\r\n}\r\n    \r\n\r\n\r\nexport default ParseExcel","import React from \"react\"\nimport Logo from \"../assets/P-MIS_LOGO.png\"\nimport 'bootstrap/dist/css/bootstrap.css';\nimport './App.css';\nimport { Row, Col, Container } from 'reactstrap'\nimport {\n  BrowserRouter as Router,\n  Switch,\n  Route,\n  Link\n} from \"react-router-dom\";\nimport VerticalMenuBar from '../components/VerticalMenuBar/VerticalMenuBar'\nimport ParseExcel from \"../components/ParseExcel/ParseExcel\";\n\nclass App extends React.Component {\n  constructor(props){\n    super(props);\n    this.state = {}\n  }\n\n  render() {\n    return (\n\n      <Container fluid>\n        <Router>\n          <Row>\n            <Col md=\"2\">\n              <VerticalMenuBar />\n            </Col>\n            <Col md=\"10\" className=\"m-0\">\n            <Switch>\n                <Route exact path=\"/\">\n                  <div style={{position:\"absolute\", top:\"45%\", left: \"50%\", transform: \"translate(-45%, -50%)\" }}>\n                    <img src={Logo} className=\"img-fluid mx-auto d-block\" style={{width:\"60%\"}} alt=\"\"/>\n                    <marquee className=\"mt-3\">Welcome Jackson Golinggan Ampogi Pogi mo!</marquee>\n                  </div>\n                </Route>\n                <Route path=\"/parseExcel\">\n                  <ParseExcel />\n                </Route>\n            </Switch>\n            </Col>\n          </Row>\n        </Router>\n        \n      </Container>\n    );\n  }\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './containers/App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n    <App />, document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}